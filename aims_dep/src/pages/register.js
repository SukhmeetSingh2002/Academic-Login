import Head from "next/head";
import Image from "next/image";
import Navbar from "../../components/Navbar";
import Table from "../../components/Table";
import { useState } from "react";
import { useRef } from "react";
import Router from "next/router";

import ButtonOutlined from "components/ButtonOutlined";
import Button from "components/Button";
import LoadingButton from "components/LoadingButton";

import { AuthContext } from "@/context/AuthContext";
import { useContext } from "react";

// paths
import {
    serverAddress,
    Register,
    rolesHeading,
    roles,
    departmentsHeading,
    departments,
} from "config/constants";
import { VerifyPath } from "config/constants";

import Dropdown from "components/Dropdown";
import SelectMenu from "components/SelectMenu";
import Select from "components/Select";

export default function Home() {
    // auth context
    const { user, isLoggedIn, accessToken, refreshToken, login } =
        useContext(AuthContext);
    const getRedirect = (group) => {
        if (group === "Student") {
            return "student";
        } else if (group === "Faculty Advisor") {
            return "advisor";
        } else if (group === "Instructor") {
            return "instructor";
        }
    };

    // if already login, redirect to its page
    if (isLoggedIn) {
        Router.push("/" + getRedirect(user.groups[0]));
    }

    // variables

    // refs
    const usernameRef = useRef();
    const emailRef = useRef();
    const passwordRef = useRef();
    const password2Ref = useRef();
    const firstNameRef = useRef();
    const lastNameRef = useRef();
    const roleRef = useRef();
    const departmentRef = useRef();

    // set error message
    const [errorMessage, setErrorMessage] = useState("");
    const [loading, setLoading] = useState(false);

    const handleLogin = async (e) => {
        e.preventDefault();
        setErrorMessage("");

        // // print all the valuies
        // console.log(roleRef.current.value);
        // // console.log(departmentRef.current.value);
        // console.log(usernameRef.current.value);
        // console.log(emailRef.current.value);
        // console.log(passwordRef.current.value);
        // console.log(password2Ref.current.value);
        // console.log(firstNameRef.current.value);
        // console.log(lastNameRef.current.value);

        // // check if password match
        if (passwordRef.current.value !== password2Ref.current.value) {
            setErrorMessage("Passwords do not match");
            return;
        }

        // send data to server
        setLoading(true);

        const res = await fetch(serverAddress + Register, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                username: usernameRef.current.value,
                email: emailRef.current.value,
                password: passwordRef.current.value,
                password2: password2Ref.current.value,
                first_name: firstNameRef.current.value,
                last_name: lastNameRef.current.value,
                group: roleRef.current.value,
                batch: departmentRef.current.value,
            }),
        });

        const data = await res.json();

        // if error
        if (res.status === 201) {
            // set error message
            setErrorMessage("Successfully registered");
            // redirect to login page
            Router.push("/login");
        } else {
            // set error message
            setErrorMessage("Something went wrong");
        }

        // stop loading
        setLoading(false);
    };

    return (
        <>
            <Head>
                <title>Student</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
            </Head>
            <main className="container_all">
                {/* bootstarp taoast and error */}
                {/* <form className="w-full max-w-lg mx-auto mt-10"> */}
                <form onSubmit={handleLogin}>
                    <div className="relative z-0 w-full mb-6 group">
                        <input
                            type="text"
                            name="floating_first_name"
                            id="floating_first_name"
                            className="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                            placeholder=" "
                            required
                            ref={usernameRef}
                        />
                        <label
                            htmlFor="floating_phone"
                            className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                        >
                            Username
                        </label>
                    </div>
                    <div className="relative z-0 w-full mb-6 group">
                        <input
                            type="email"
                            name="floating_email"
                            id="floating_email"
                            className="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                            placeholder=" "
                            required
                            ref={emailRef}
                        />
                        <label
                            htmlFor="floating_email"
                            className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                        >
                            Email address
                        </label>
                    </div>
                    <div className="relative z-0 w-full mb-6 group">
                        <input
                            type="password"
                            name="floating_password"
                            id="floating_password"
                            className="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                            placeholder=" "
                            required
                            ref={passwordRef}
                        />
                        <label
                            htmlFor="floating_password"
                            className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                        >
                            Password
                        </label>
                    </div>
                    <div className="relative z-0 w-full mb-6 group">
                        <input
                            type="password"
                            name="repeat_password"
                            id="floating_repeat_password"
                            className="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                            placeholder=" "
                            required
                            ref={password2Ref}
                        />
                        <label
                            htmlFor="floating_repeat_password"
                            className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                        >
                            Confirm password
                        </label>
                    </div>
                    <div className="grid md:grid-cols-2 md:gap-6">
                        <div className="relative z-0 w-full mb-6 group">
                            <input
                                type="text"
                                name="floating_first_name"
                                id="floating_first_name"
                                className="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                                placeholder=" "
                                required
                                ref={firstNameRef}
                            />
                            <label
                                htmlFor="floating_first_name"
                                className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                            >
                                First name
                            </label>
                        </div>
                        <div className="relative z-0 w-full mb-6 group">
                            <input
                                type="text"
                                name="floating_last_name"
                                id="floating_last_name"
                                className="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                                placeholder=" "
                                required
                                ref={lastNameRef}
                            />
                            <label
                                htmlFor="floating_last_name"
                                className="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6"
                            >
                                Last name
                            </label>
                        </div>
                    </div>
                    <div className="grid md:grid-cols-2 md:gap-6">
                        <div className="relative z-0 w-full mb-6 group">
                            <Select
                                heading={departmentsHeading}
                                options={departments}
                                selectRef={departmentRef}
                            />
                        </div>

                        {/* select */}
                        <div className="relative z-0 w-full mb-6 group">
                            <Select
                                heading={rolesHeading}
                                options={roles}
                                selectRef={roleRef}
                            />
                        </div>
                    </div>
                    {
                        <p
                            id="filled_success_help"
                            className={`mt-2 text-xs text-red-600 ${
                                errorMessage === "" ? "invisible" : ""
                            }`}
                        >
                            <span className="font-medium">{errorMessage}</span>
                        </p>
                    }
                    {!loading ? (
                        <button
                            type="submit"
                            className="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                        >
                            Submit
                        </button>
                    ) : (
                        <LoadingButton />
                    )}
                </form>
            </main>
        </>
    );
}
